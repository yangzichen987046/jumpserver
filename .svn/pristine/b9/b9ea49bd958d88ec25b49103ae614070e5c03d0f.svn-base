# coding: utf-8

from Crypto.PublicKey import RSA
from subprocess import call

from juser.models import AdminGroup
from jumpserver.api import *
from jumpserver.settings import BASE_DIR, EMAIL_HOST_USER as MAIL_FROM
from juser.models import AccessKey
from jasset.models import Region
import os
import commands
from jasset.forms import AssetForm

def db_add_key(**kwargs):
    """
    数据库中添加用户的access key
    """
    key = AccessKey(**kwargs)
    key = key.save()
    return key


def db_del_key(username):
    """
    从数据库中删除用户
    """
    user = get_object(AccessKey, key_id=username)
    if user:
        user.delete()


def db_update_key(**kwargs):
    """
    数据库更新用户Access Key信息
    """
    id = kwargs.pop('id')
    key = AccessKey.objects.filter(id=id)
    if key:
        key.update(**kwargs)
    else:
        return None


def sync_host_list(key_id, key_secret, plat_id=1):
    """
    新增或者更新过access key 之后同步主机信息
    """
    key_id = str(key_id)
    key_secret = str(key_secret)
    ####阿里云平台####
    if plat_id == 1:
        region_list = Region.objects.filter(plat_id=1)
        # region_list = Region.objects.all(plat_id=1)
        # region_list = get_object(Region,plat_id=1)
        host_list_all = []
        cmd_all = []
        for region in region_list:
            cmd = "/home/zsc/ecs-test.py {0} {1} DescribeInstances RegionId={2}".\
                format(key_id,key_secret,region.region_id)
            status,host_list_tmp = commands.getstatusoutput(cmd)
            host_list_tmp_json = json.loads(host_list_tmp)
            if host_list_tmp_json['Instances']['Instance']:
                host_list_all.append(host_list_tmp_json['Instances']['Instance'])
            cmd_all.append(cmd)
            msg = auto_add_host(host_list_all)
        return msg

    ####UCloud####
    elif plat_id == 2:
        cmd = ''
        tmp = os.popen(cmd).readlines()

    return tmp


def auto_add_host(host_list_all):
    for host_list in host_list_all:
        for host_info in host_list:
            asset_group_all = AssetGroup.objects.all()
            af = AssetForm()
            default_setting = get_object(Setting, name='default')
            default_port = default_setting.field2 if default_setting else ''

            data_insert = {
                    'hostname' : host_info['InstanceName'],
                    'ip' : host_info['PublicIpAddress']['IpAddress'][0],
                    'use_default_auth' : 1,
                    'is_active' : 1,
                    'port' : 22,
                    'host_id' : host_info['InstanceId'],
                    'plat_id' : 1,
                    'accesskey_id' : 1,
                    'expire_time' : host_info['ExpiredTime'],
                    'group' : [1]
                }
            af_post = AssetForm(data_insert)
            ip = host_info['PublicIpAddress']['IpAddress']
            hostname = host_info['InstanceName']
            is_active = True
            use_default_auth = True
            # group = 1
            try:
                if Asset.objects.filter(hostname=unicode(hostname)):
                    error = u'该主机名 %s 已存在!' % hostname
                    raise ServerError(error)

            except ServerError:
                pass
            else:
                if af_post.is_valid():
                    asset_save = af_post.save(commit=False)
                    if not use_default_auth:
                        password = 'password'
                        password_encode = CRYPTOR.encrypt(password)
                        asset_save.password = password_encode
                    if not ip:
                        asset_save.ip = hostname
                    asset_save.is_active = True if is_active else False
                    asset_save.save()
                    af_post.save_m2m()

                    msg = u'主机 %s 添加成功' % hostname
                    return msg
                else:
                    esg = u'主机 %s 添加失败' % hostname
                    return esg
    return


def restart_host(key_id, key_secret, host_id):
    """
    :param key_id: 用户的key_id
    :param key_secret: 用户的key_secret
    :param host_id:平台主机ID
    :return:返回执行结果
    """
    cmd = "/home/zsc/ecs-test.py  {0}  {1} RebootInstance InstanceId={2}".format(key_id,key_secret,host_id)
    status,res_restart = commands.getstatusoutput(cmd)
    return res_restart


def start_host(key_id, key_secret, host_id):
    """
    :param key_id: 用户的key_id
    :param key_secret: 用户的key_secret
    :param host_id:平台主机ID
    :return:返回执行结果
    """
    cmd = "/home/zsc/ecs-test.py  {0}  {1} StartInstance InstanceId={2}".format(key_id,key_secret,host_id)
    status,res_start = commands.getstatusoutput(cmd)
    return res_start


def stop_host(key_id, key_secret, host_id):
    """
    :param key_id: 用户的key_id
    :param key_secret: 用户的key_secret
    :param host_id:平台主机ID
    :return:返回执行结果
    """
    cmd = "/home/zsc/ecs-test.py  {0}  {1} StopInstance InstanceId={2}".format(key_id,key_secret,host_id)
    status,res_stop = commands.getstatusoutput(cmd)
    return res_stop


def sync_ali_region_list():
    """
    同步阿里云平台的地区数据，用于同步主机列表
    """
    cmd = './ecst.py {0} '.format('DescribeRegions')
    # cmd = "pwd"
    # region_list = os.popen(cmd).readlines()
    status,region_list = commands.getstatusoutput(cmd)

    region_list_json = json.loads(region_list)
    region_list_all = region_list_json['Regions']['Region']

    aa = []
    for region in region_list_all:
        region_m = Region(plat_id=1, region_id=region['RegionId'])
        region_m.save()
        aa.append(region['RegionId'])
    return aa
